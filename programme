#include <SFML/Graphics.hpp>

//on définit les constantes hors du main pour ne pas avoir à les appeler à chaque fois qu'elles sont utilisées dans un programme
const int NBCOLORS = 5, HEIGHT = 600, WIDTH = 900, FALLSPEED = 10, SIZEPUYO = 1/30 * WIDTH, WIDTHMAT = 6, HEIGHTMAT = 12, WAITINGPOSX = WIDTH /2 - SIZEPUYO, WAITINGPOSY = 100;

const char VOID = 'v', WHITE = 'w', RED = 'r', YELLOW = 'y', BLUE = 'b', GREEN = 'g', PURPLE = 'p';


struct Pos {
	int x ;
	int y ;
};

struct Block {
	bool exist;
	char color;
	int groupID;
};

struct BlockFall {
	int orient ;
	char color1 ;
	char color2 ; 
	Pos posMat ; 
	int speed ; 
};

struct Player {
	BlockFall bf1;
	BlockFall bf2 ;
	Block blocks[WIDTHMAT][HEIGHTMAT] ;
	int score ;
};

struct Game {
	Player p1;
	Player p2; 
};

//initBlockFall

//switchColor

//random0toNb

//randBlockFall

//startTour

//blockTest

//doGravityOnAll

//continueFall

//blockDown

//AttribuerGroupe - Anton

//checkAllChains - Anton not finito
void CheckAllChains(Block mat[WIDTHMAT][HEIGHTMAT]) {
	int baseGroupId = 1;
	for (int i = 0; i < WIDTHMAT; i++) {
		for (int j = 0; j < HEIGHTMAT; j++) {

		}
	}
}
bool blockAtStart (int blocks[WIDTHMAT][HEIGHTMAT]) {
	return (blockTest(blocks,0,(WIDTHMAT/2 -1)) || blockTest(blocks,0,WIDTHMAT/2));
}

int countNbBlocksEqualID (Block mat[WIDTHMAT][HEIGHTMAT], int ID) {
	int nb = 0; 
	for (int i = 0 ; i < WIDTHMAT ; i++) {
		for (int j = 0 ; j < HEIGHTMAT ; j++) {
			if (mat[i][j].groupID == ID) {
				nb ++ ;
			}
		}
	}
	return nb;
}

void setMalusOnPlayer (Player p1, int reps) {
	int nb ; 
	for (int i = 0 ; i < reps ; i++) {
		nb = random0toNb(WIDTHMAT);
		if (p1.blocks[0][nb].exist == false) {
			p1.blocks[i][0].color = WHITE ;
			p1.blocks[i][0].exist = true ; 
			doGravityOnAll(p1.blocks);		
		}
	}
}

void resetBlocksForID (Block block[WIDTHMAT][HEIGHTMAT], int ID) {
	for (int i = 0 ; i < WIDTHMAT ; i++) {
		for (int j = 0 ; j < HEIGHTMAT ; j++) {
			if (block[i][j].groupID == ID && block[i][j].color != WHITE) {
				block[i][j].exist = false ;
				block[i][j].color = VOID ; 
				if (block[i][j+1].color == WHITE) {
					block[i][j+1].exist = false ; 
					block[i][j+1].color = VOID ; 
				}
				if (block[i][j-1].color == WHITE) {
					block[i][j-1].exist = false ; 
					block[i][j-1].color = VOID ; 
				}
				if (block[i-1][j].color == WHITE) {
					block[i-1][j].exist = false ; 
					block[i-1][j].color = VOID ; 
				}
				if (block[i+1][j].color == WHITE) {
					block[i+1][j].exist = false ; 
					block[i+1][j].color = VOID ; 
				}
			}
		}
	}
}

int destroyBlock (Block mat[WIDTHMAT][HEIGHTMAT]) {
	int nbrChain = 0 ; 
	for (int k = 1 ; k < WIDTHMAT*HEIGHTMAT ; k++ ) {
		if (countNbBlocksEqualID(mat, k)>3) {
			resetBlocksForID(mat, k) ; 
			nbrChain ++ ; 
		}
	} 
	for (int i = 0 ; i < WIDTHMAT ; i++) {
		for (int j = 0 ; j < HEIGHTMAT ; j++) {
			mat[i][j].groupID = 0 ; 
		}
	}
	return nbrChain ; 
}

int main() {

	sf::RenderWindow window(sf::VideoMode(WIDTH, HEIGHT), "Puyo Puyo");
	bool doStartTour, gameOver ; 
	int penaltyReps1, penaltyReps2; 
	sf::Clock clock; 

	
	//boucle principale 
	while (window.isOpen()) {
		sf::Event event ; 
		while (window.pollEvent(event)) {
			if (event.type == sf::Event::Closed) {
			window.close();
			}
		}

	}
	return 0 ;
}

